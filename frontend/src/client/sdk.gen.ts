// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise"
import { OpenAPI } from "./core/OpenAPI"
import { request as __request } from "./core/request"
import type {
  DatabaseInitializeDatabaseResponse,
  DataEntriesUploadDataEntryData,
  DataEntriesUploadDataEntryResponse,
  DataEntriesProcessDataEntryData,
  DataEntriesProcessDataEntryResponse,
  DataEntriesGetProcessingStatusData,
  DataEntriesGetProcessingStatusResponse,
  DataSourcesListMyDataSourcesResponse,
  DataSourcesCreateDataSourceEndpointData,
  DataSourcesCreateDataSourceEndpointResponse,
  DataSourcesListDataSourceUsersData,
  DataSourcesListDataSourceUsersResponse,
  DataSourcesGrantDataSourceAccessData,
  DataSourcesGrantDataSourceAccessResponse,
  DataSourcesRevokeDataSourceAccessData,
  DataSourcesRevokeDataSourceAccessResponse,
  FieldsListPyxisFieldDataData,
  FieldsListPyxisFieldDataResponse,
  FieldsListPyxisFieldDataByDataEntryData,
  FieldsListPyxisFieldDataByDataEntryResponse,
  LoginLoginAccessTokenData,
  LoginLoginAccessTokenResponse,
  LoginLoginGoogleResponse,
  LoginAuthGoogleCallbackResponse,
  LoginRecoverPasswordData,
  LoginRecoverPasswordResponse,
  LoginResetPasswordData,
  LoginResetPasswordResponse,
  LoginRecoverPasswordHtmlContentData,
  LoginRecoverPasswordHtmlContentResponse,
  PrivateCreateUserData,
  PrivateCreateUserResponse,
  PrivateTestEmailData,
  PrivateTestEmailResponse,
  PrivateHealthCheckResponse,
  RootRootResponse,
  UsersReadUsersData,
  UsersReadUsersResponse,
  UsersCreateUserData,
  UsersCreateUserResponse,
  UsersReadUserMeResponse,
  UsersDeleteUserMeResponse,
  UsersUpdateUserMeData,
  UsersUpdateUserMeResponse,
  UsersUpdatePasswordMeData,
  UsersUpdatePasswordMeResponse,
  UsersRegisterUserData,
  UsersRegisterUserResponse,
  UsersReadUserByIdData,
  UsersReadUserByIdResponse,
  UsersUpdateUserData,
  UsersUpdateUserResponse,
  UsersDeleteUserData,
  UsersDeleteUserResponse,
} from "./types.gen"

export class DatabaseService {
  /**
   * Initialize Database
   * Initialize database tables based on SQLAlchemy models
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static initializeDatabase(): CancelablePromise<DatabaseInitializeDatabaseResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/database/init_db",
    })
  }
}

export class DataEntriesService {
  /**
   * Upload Data Entry
   * Upload a new data entry with data file and config file.
   *
   * This endpoint accepts multipart form data with:
   * - source_id: ID of the data source
   * - granularity: Level of data granularity (field, well, etc.)
   * - alias: (Optional) Human-readable name for the data entry
   * - additional_metadata: (Optional) JSON object with additional metadata
   * - data_file: The data file (CSV, etc.)
   * - config_file: JSON configuration file for mapping data
   * @param data The data for the request.
   * @param data.sourceId
   * @param data.granularity
   * @param data.formData
   * @param data.alias
   * @param data.additionalMetadata
   * @returns DataEntryUploadResponse Successful Response
   * @throws ApiError
   */
  public static uploadDataEntry(
    data: DataEntriesUploadDataEntryData,
  ): CancelablePromise<DataEntriesUploadDataEntryResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/data-entries/",
      query: {
        source_id: data.sourceId,
        granularity: data.granularity,
        alias: data.alias,
        additional_metadata: data.additionalMetadata,
      },
      formData: data.formData,
      mediaType: "multipart/form-data",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Process Data Entry
   * Trigger processing of a data entry.
   *
   * Args:
   * data_entry_id: ID of the data entry to process
   * background_tasks: FastAPI background tasks
   * current_user: Current authenticated user
   * db: Database session
   *
   * Returns:
   * Dict with processing status
   * @param data The data for the request.
   * @param data.dataEntryId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static processDataEntry(
    data: DataEntriesProcessDataEntryData,
  ): CancelablePromise<DataEntriesProcessDataEntryResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/data-entries/{data_entry_id}/process",
      path: {
        data_entry_id: data.dataEntryId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Processing Status
   * Get the processing status of a data entry.
   *
   * Args:
   * data_entry_id: ID of the data entry
   * current_user: Current authenticated user
   * db: Database session
   *
   * Returns:
   * Dict with processing status
   * @param data The data for the request.
   * @param data.dataEntryId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getProcessingStatus(
    data: DataEntriesGetProcessingStatusData,
  ): CancelablePromise<DataEntriesGetProcessingStatusResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/data-entries/{data_entry_id}/status",
      path: {
        data_entry_id: data.dataEntryId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class DataSourcesService {
  /**
   * List My Data Sources
   * List all data sources the current user has access to
   * @returns DataSourceResponse Successful Response
   * @throws ApiError
   */
  public static listMyDataSources(): CancelablePromise<DataSourcesListMyDataSourcesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/data-sources/",
    })
  }

  /**
   * Create Data Source Endpoint
   * Create a new data source
   *
   * The current user will automatically be given access to this data source.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns DataSourceMetaResponse Successful Response
   * @throws ApiError
   */
  public static createDataSourceEndpoint(
    data: DataSourcesCreateDataSourceEndpointData,
  ): CancelablePromise<DataSourcesCreateDataSourceEndpointResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/data-sources/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * List Data Source Users
   * List all users who have access to a data source
   * @param data The data for the request.
   * @param data.dataSourceId
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static listDataSourceUsers(
    data: DataSourcesListDataSourceUsersData,
  ): CancelablePromise<DataSourcesListDataSourceUsersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/data-sources/{data_source_id}/users",
      path: {
        data_source_id: data.dataSourceId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Grant Data Source Access
   * Grant a user access to a data source
   * @param data The data for the request.
   * @param data.dataSourceId
   * @param data.userId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static grantDataSourceAccess(
    data: DataSourcesGrantDataSourceAccessData,
  ): CancelablePromise<DataSourcesGrantDataSourceAccessResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/data-sources/access/{data_source_id}",
      path: {
        data_source_id: data.dataSourceId,
      },
      query: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Revoke Data Source Access
   * Revoke a user's access to a data source
   * @param data The data for the request.
   * @param data.dataSourceId
   * @param data.userId
   * @returns void Successful Response
   * @throws ApiError
   */
  public static revokeDataSourceAccess(
    data: DataSourcesRevokeDataSourceAccessData,
  ): CancelablePromise<DataSourcesRevokeDataSourceAccessResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/data-sources/access/{data_source_id}/",
      path: {
        data_source_id: data.dataSourceId,
      },
      query: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class FieldsService {
  /**
   * List Pyxis Field Data
   * List all Pyxis fields data.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns PyxisFieldDataResponse Successful Response
   * @throws ApiError
   */
  public static listPyxisFieldData(
    data: FieldsListPyxisFieldDataData = {},
  ): CancelablePromise<FieldsListPyxisFieldDataResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/fields/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * List Pyxis Field Data By Data Entry
   * List all Pyxis field data for a specific data entry.
   * @param data The data for the request.
   * @param data.dataEntryId
   * @param data.skip
   * @param data.limit
   * @returns PyxisFieldDataResponse Successful Response
   * @throws ApiError
   */
  public static listPyxisFieldDataByDataEntry(
    data: FieldsListPyxisFieldDataByDataEntryData,
  ): CancelablePromise<FieldsListPyxisFieldDataByDataEntryResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/fields/by-data-entry/{data_entry_id}",
      path: {
        data_entry_id: data.dataEntryId,
      },
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class LoginService {
  /**
   * Login Access Token
   * OAuth2 compatible token login, get an access token for future requests
   * @param data The data for the request.
   * @param data.formData
   * @returns Token Successful Response
   * @throws ApiError
   */
  public static loginAccessToken(
    data: LoginLoginAccessTokenData,
  ): CancelablePromise<LoginLoginAccessTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/access-token",
      formData: data.formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Login Google
   * Initiate Google OAuth login flow
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static loginGoogle(): CancelablePromise<LoginLoginGoogleResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/login/google",
    })
  }

  /**
   * Auth Google Callback
   * Handle Google OAuth callback and create/get user
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static authGoogleCallback(): CancelablePromise<LoginAuthGoogleCallbackResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/login/google/callback",
    })
  }

  /**
   * Recover Password
   * Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static recoverPassword(
    data: LoginRecoverPasswordData,
  ): CancelablePromise<LoginRecoverPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/password-recovery/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Reset Password
   * Reset password
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static resetPassword(
    data: LoginResetPasswordData,
  ): CancelablePromise<LoginResetPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/reset-password/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Recover Password Html Content
   * HTML Content for Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns string Successful Response
   * @throws ApiError
   */
  public static recoverPasswordHtmlContent(
    data: LoginRecoverPasswordHtmlContentData,
  ): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/password-recovery-html-content/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class PrivateService {
  /**
   * Create User
   * Create a new user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: PrivateCreateUserData,
  ): CancelablePromise<PrivateCreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/private/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Test Email
   * Test emails.
   * @param data The data for the request.
   * @param data.emailTo
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static testEmail(
    data: PrivateTestEmailData,
  ): CancelablePromise<PrivateTestEmailResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/private/test-email/",
      query: {
        email_to: data.emailTo,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Health Check
   * @returns boolean Successful Response
   * @throws ApiError
   */
  public static healthCheck(): CancelablePromise<PrivateHealthCheckResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/private/health-check/",
    })
  }
}

export class RootService {
  /**
   * Root
   * Root endpoint for Pyxis API.
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static root(): CancelablePromise<RootRootResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/",
    })
  }
}

export class UsersService {
  /**
   * Read Users
   * Retrieve users.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns UsersPublic Successful Response
   * @throws ApiError
   */
  public static readUsers(
    data: UsersReadUsersData = {},
  ): CancelablePromise<UsersReadUsersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create User
   * Create new user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: UsersCreateUserData,
  ): CancelablePromise<UsersCreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User Me
   * Get current user.
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Delete User Me
   * Delete own user.
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Update User Me
   * Update own user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUserMe(
    data: UsersUpdateUserMeData,
  ): CancelablePromise<UsersUpdateUserMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Password Me
   * Update own password.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static updatePasswordMe(
    data: UsersUpdatePasswordMeData,
  ): CancelablePromise<UsersUpdatePasswordMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me/password",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Register User
   * Create new user without the need to be logged in.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static registerUser(
    data: UsersRegisterUserData,
  ): CancelablePromise<UsersRegisterUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/signup",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User By Id
   * Get a specific user by id.
   * @param data The data for the request.
   * @param data.userId
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserById(
    data: UsersReadUserByIdData,
  ): CancelablePromise<UsersReadUserByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update User
   * Update a user.
   * @param data The data for the request.
   * @param data.userId
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUser(
    data: UsersUpdateUserData,
  ): CancelablePromise<UsersUpdateUserResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete User
   * Delete a user.
   * @param data The data for the request.
   * @param data.userId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUser(
    data: UsersDeleteUserData,
  ): CancelablePromise<UsersDeleteUserResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}
