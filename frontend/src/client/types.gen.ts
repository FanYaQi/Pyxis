// This file is auto-generated by @hey-api/openapi-ts

export type Body_data_entries_upload_data_entry = {
  data_file: Blob | File
  config_file: Blob | File
}

export type Body_login_login_access_token = {
  grant_type?: string | null
  username: string
  password: string
  scope?: string
  client_id?: string | null
  client_secret?: string | null
}

/**
 * CO2 source options
 */
export type CO2SourceType = "Natural subsurface reservoir" | "Anthropogenic"

/**
 * Enumeration of possible data access types
 */
export type DataAccessType = "api" | "file_upload"

/**
 * Schema for data entry information
 */
export type DataEntryInfo = {
  id: number
  /**
   * ID of the data source this entry belongs to
   */
  source_id: number
  /**
   * Record ID for this data entry
   */
  record_id: string
  /**
   * Version of the dataset
   */
  version: string
  /**
   * Human-readable identifier for this data entry
   */
  alias: string
  /**
   * Granularity level of the data
   */
  granularity: DataGranularity
  /**
   * Original filename or archive name
   */
  file_name?: string | null
  /**
   * File extension type
   */
  file_extension: FileExtension
  /**
   * Size of the file in bytes
   */
  file_size?: number | null
  /**
   * List of filenames within the archive
   */
  contained_files?: Array<string> | null
  raw_data_md5?: string | null
  config_file_md5?: string | null
  status: ProcessingStatus
  /**
   * Additional metadata for the entry
   */
  additional_metadata?: {
    [key: string]: unknown
  } | null
  created_at: string
  updated_at: string
}

/**
 * Response for data entry upload
 */
export type DataEntryUploadResponse = {
  data_entry: DataEntryInfo
  message?: string
}

/**
 * Enumeration of possible data granularities
 */
export type DataGranularity =
  | "well"
  | "field"
  | "basin"
  | "country"
  | "global"
  | "other"

/**
 * Schema for creating a new data source metadata record
 */
export type DataSourceMetaCreate = {
  /**
   * Name of the data source (e.g., ANP, Zhan)
   */
  name: string
  /**
   * Detailed description of the data source
   */
  description?: string | null
  /**
   * URLs associated with the data source
   */
  urls?: Array<string> | null
  /**
   * Type of source (government, paper, commercial, ngo)
   */
  source_type: SourceType
  /**
   * How data is accessed (api, file_upload)
   */
  data_access_type: DataAccessType
  /**
   * Score for data reliability
   */
  reliability_score?: number | null
  /**
   * Score for data recency
   */
  recency_score?: number | null
  /**
   * Score for data coverage/richness
   */
  richness_score?: number | null
  /**
   * Overall Pyxis data quality score
   */
  pyxis_score?: number | null
}

/**
 * Schema for a complete data source metadata record with database fields
 */
export type DataSourceMetaResponse = {
  /**
   * Name of the data source (e.g., ANP, Zhan)
   */
  name: string
  /**
   * Detailed description of the data source
   */
  description?: string | null
  /**
   * URLs associated with the data source
   */
  urls?: Array<string> | null
  /**
   * Type of source (government, paper, commercial, ngo)
   */
  source_type: SourceType
  /**
   * How data is accessed (api, file_upload)
   */
  data_access_type: DataAccessType
  /**
   * Score for data reliability
   */
  reliability_score?: number | null
  /**
   * Score for data recency
   */
  recency_score?: number | null
  /**
   * Score for data coverage/richness
   */
  richness_score?: number | null
  /**
   * Overall Pyxis data quality score
   */
  pyxis_score?: number | null
  id: number
  created_at: string
  updated_at?: string | null
}

/**
 * Pydantic model for a user permission response
 */
export type DataSourceResponse = {
  data_source_id: number
  data_source_name: string
}

/**
 * Ecosystem carbon richness options
 */
export type EcosystemRichness = "Low carbon" | "Med carbon" | "High carbon"

/**
 * Field development intensity options
 */
export type FieldDevelopmentIntensity = "Low" | "Med" | "High"

/**
 * Enumeration of supported file extensions
 */
export type FileExtension =
  | "csv"
  | "json"
  | "geojson"
  | "shp"
  | "xls"
  | "xlsx"
  | "txt"
  | "zip"
  | "gdb"
  | "gpkg"
  | "kml"
  | "other"

/**
 * Flood gas type options
 */
export type FloodGasType = "NG" | "N2" | "CO2"

/**
 * Functional unit options for field data
 */
export type FunctionalUnit = "oil" | "gas"

/**
 * Gas processing path options
 */
export type GasProcessingPath =
  | "None"
  | "Minimal"
  | "Acid Gas"
  | "Wet Gas"
  | "Acid Wet Gas"
  | "Sour Gas Reinjection"
  | "CO2-EOR Membrane"
  | "CO2-EOR Ryan Holmes"

export type HTTPValidationError = {
  detail?: Array<ValidationError>
}

export type Message = {
  message: string
}

export type NewPassword = {
  token: string
  new_password: string
}

/**
 * Oil sands mine type options
 */
export type OilSandsMineType =
  | "None"
  | "Integrated with upgrader"
  | "Integrated with diluent"
  | "Integrated with both"

export type PrivateUserCreate = {
  email: string
  password: string
  full_name: string
  is_verified?: boolean
}

/**
 * Enumeration of possible processing statuses
 */
export type ProcessingStatus = "pending" | "processing" | "completed" | "failed"

/**
 * Schema for returning PyxisFieldData
 */
export type PyxisFieldDataResponse = {
  /**
   * Reference to the Pyxis field meta ID
   */
  pyxis_field_meta_id: number | null
  /**
   * Reference to the data entry ID
   */
  data_entry_id: number
  /**
   * Start date when these attributes became effective
   */
  effective_start_date: string
  /**
   * End date when these attributes were superseded
   */
  effective_end_date?: string | null
  /**
   * Name of the field
   */
  name?: string | null
  /**
   * Country of the field
   */
  country?: string | null
  /**
   * Latitude of the field
   */
  latitude?: number | null
  /**
   * Longitude of the field
   */
  longitude?: number | null
  /**
   * H3 index of the field centroid
   */
  centroid_h3_index?: string | null
  /**
   * Whether the field produces primarily oil or gas
   */
  functional_unit?: FunctionalUnit | null
  /**
   * Whether the field uses downhole pumps
   */
  downhole_pump?: boolean | null
  /**
   * Whether the field uses water reinjection
   */
  water_reinjection?: boolean | null
  /**
   * Whether the field uses natural gas reinjection
   */
  natural_gas_reinjection?: boolean | null
  /**
   * Whether the field uses water flooding
   */
  water_flooding?: boolean | null
  /**
   * Whether the field uses gas lifting
   */
  gas_lifting?: boolean | null
  /**
   * Whether the field uses gas flooding
   */
  gas_flooding?: boolean | null
  /**
   * Whether the field uses steam flooding
   */
  steam_flooding?: boolean | null
  /**
   * Type of oil sands mining operation
   */
  oil_sands_mine_type?: OilSandsMineType | null
  /**
   * Age of the field in years
   */
  age?: number | null
  /**
   * Depth of the field in feet
   */
  depth?: number | null
  /**
   * Oil production volume in barrels per day
   */
  oil_prod?: number | null
  /**
   * Number of producing wells
   */
  num_prod_wells?: number | null
  /**
   * Number of water injecting wells
   */
  num_water_inj_wells?: number | null
  /**
   * Production tubing diameter in inches
   */
  well_diam?: number | null
  /**
   * Productivity index in bbl_oil/(psia*day)
   */
  prod_index?: number | null
  /**
   * Reservoir pressure in psia
   */
  res_press?: number | null
  /**
   * Reservoir temperature in degrees Fahrenheit
   */
  res_temp?: number | null
  /**
   * Whether the field is offshore
   */
  offshore?: boolean | null
  /**
   * API gravity of oil at standard pressure and temperature
   */
  api?: number | null
  /**
   * Percentage of N2 in the gas composition
   */
  gas_comp_n2?: number | null
  /**
   * Percentage of CO2 in the gas composition
   */
  gas_comp_co2?: number | null
  /**
   * Percentage of C1 (methane) in the gas composition
   */
  gas_comp_c1?: number | null
  /**
   * Percentage of C2 (ethane) in the gas composition
   */
  gas_comp_c2?: number | null
  /**
   * Percentage of C3 (propane) in the gas composition
   */
  gas_comp_c3?: number | null
  /**
   * Percentage of C4+ (butane+) in the gas composition
   */
  gas_comp_c4?: number | null
  /**
   * Percentage of H2S in the gas composition
   */
  gas_comp_h2s?: number | null
  /**
   * Gas-to-oil ratio in scf/bbl_oil
   */
  gor?: number | null
  /**
   * Water-to-oil ratio in bbl_water/bbl_oil
   */
  wor?: number | null
  /**
   * Water injection ratio in bbl_water/bbl_oil
   */
  wir?: number | null
  /**
   * Gas lifting injection ratio in scf/bbl_liquid
   */
  glir?: number | null
  /**
   * Gas flooding injection ratio in scf/bbl_oil
   */
  gfir?: number | null
  /**
   * Type of gas used for flooding
   */
  flood_gas_type?: FloodGasType | null
  /**
   * Fraction of CO2 breaking through to producers
   */
  frac_co2_breakthrough?: number | null
  /**
   * Source of makeup CO2
   */
  co2_source?: CO2SourceType | null
  /**
   * Percentage of sequestration credit assigned to the oilfield
   */
  perc_sequestration_credit?: number | null
  /**
   * Steam-to-oil ratio in bbl_steam/bbl_oil
   */
  sor?: number | null
  /**
   * Fraction of required fossil electricity generated onsite
   */
  fraction_elec_onsite?: number | null
  /**
   * Fraction of remaining natural gas reinjected
   */
  fraction_remaining_gas_inj?: number | null
  /**
   * Fraction of produced water reinjected
   */
  fraction_water_reinjected?: number | null
  /**
   * Fraction of steam generation via cogeneration
   */
  fraction_steam_cogen?: number | null
  /**
   * Fraction of steam generation via solar thermal
   */
  fraction_steam_solar?: number | null
  /**
   * Whether a heater/treater is used
   */
  heater_treater?: boolean | null
  /**
   * Whether a stabilizer column is used
   */
  stabilizer_column?: boolean | null
  /**
   * Type of upgrader used
   */
  upgrader_type?: UpgraderType | null
  /**
   * Associated gas processing path
   */
  gas_processing_path?: GasProcessingPath | null
  /**
   * Flaring-to-oil ratio in scf/bbl_oil
   */
  for_value?: number | null
  /**
   * Purposeful venting fraction (post-flare gas fraction vented)
   */
  frac_venting?: number | null
  /**
   * Volume fraction of diluent
   */
  fraction_diluent?: number | null
  /**
   * Ecosystem carbon richness category
   */
  ecosystem_richness?: EcosystemRichness | null
  /**
   * Field development intensity category
   */
  field_development_intensity?: FieldDevelopmentIntensity | null
  /**
   * Fraction of product transported by ocean tanker
   */
  frac_transport_tanker?: number | null
  /**
   * Fraction of product transported by barge
   */
  frac_transport_barge?: number | null
  /**
   * Fraction of product transported by pipeline
   */
  frac_transport_pipeline?: number | null
  /**
   * Fraction of product transported by rail
   */
  frac_transport_rail?: number | null
  /**
   * Fraction of product transported by truck
   */
  frac_transport_truck?: number | null
  /**
   * Transportation distance by ocean tanker in miles
   */
  transport_dist_tanker?: number | null
  /**
   * Transportation distance by barge in miles
   */
  transport_dist_barge?: number | null
  /**
   * Transportation distance by pipeline in miles
   */
  transport_dist_pipeline?: number | null
  /**
   * Transportation distance by rail in miles
   */
  transport_dist_rail?: number | null
  /**
   * Transportation distance by truck in miles
   */
  transport_dist_truck?: number | null
  /**
   * Ocean tanker size in tonnes
   */
  ocean_tanker_size?: number | null
  /**
   * Small sources emissions
   */
  small_sources_emissions?: number | null
  /**
   * Additional attributes not explicitly defined
   */
  additional_attributes?: {
    [key: string]: unknown
  } | null
  id: number
}

/**
 * Enumeration of possible source types
 */
export type SourceType =
  | "government"
  | "paper"
  | "commercial"
  | "ngo"
  | "personal"
  | "other"

export type Token = {
  access_token: string
  token_type?: string
}

export type UpdatePassword = {
  current_password: string
  new_password: string
}

/**
 * Upgrader type options
 */
export type UpgraderType =
  | "None"
  | "Delayed coking"
  | "Hydroconversion"
  | "Combined"

export type UserCreate = {
  email: string
  is_active?: boolean
  is_superuser?: boolean
  full_name: string | null
  password: string
}

export type UserPublic = {
  email: string
  is_active?: boolean
  is_superuser?: boolean
  full_name: string | null
  id: string
  oauth_provider: string | null
}

export type UserSignup = {
  email: string
  password: string
  full_name: string
}

export type UsersPublic = {
  data: Array<UserPublic>
  count: number
}

export type UserUpdate = {
  email: string | null
  is_active?: boolean
  is_superuser?: boolean
  full_name: string | null
  password: string | null
}

export type UserUpdateMe = {
  email: string | null
  full_name: string | null
}

export type ValidationError = {
  loc: Array<string | number>
  msg: string
  type: string
}

export type DatabaseInitializeDatabaseResponse = unknown

export type DataEntriesUploadDataEntryData = {
  additionalMetadata?: string | null
  alias?: string | null
  formData: Body_data_entries_upload_data_entry
  granularity: DataGranularity
  sourceId: number
}

export type DataEntriesUploadDataEntryResponse = DataEntryUploadResponse

export type DataEntriesProcessDataEntryData = {
  dataEntryId: number
}

export type DataEntriesProcessDataEntryResponse = {
  [key: string]: unknown
}

export type DataEntriesGetProcessingStatusData = {
  dataEntryId: number
}

export type DataEntriesGetProcessingStatusResponse = {
  [key: string]: unknown
}

export type DataSourcesListMyDataSourcesResponse = Array<DataSourceResponse>

export type DataSourcesCreateDataSourceEndpointData = {
  requestBody: DataSourceMetaCreate
}

export type DataSourcesCreateDataSourceEndpointResponse = DataSourceMetaResponse

export type DataSourcesListDataSourceUsersData = {
  dataSourceId: number
}

export type DataSourcesListDataSourceUsersResponse = Array<UserPublic>

export type DataSourcesGrantDataSourceAccessData = {
  dataSourceId: number
  userId: number
}

export type DataSourcesGrantDataSourceAccessResponse = unknown

export type DataSourcesRevokeDataSourceAccessData = {
  dataSourceId: number
  userId: number
}

export type DataSourcesRevokeDataSourceAccessResponse = void

export type FieldsListPyxisFieldDataData = {
  limit?: number
  skip?: number
}

export type FieldsListPyxisFieldDataResponse = Array<PyxisFieldDataResponse>

export type FieldsListPyxisFieldDataByDataEntryData = {
  dataEntryId: number
  limit?: number
  skip?: number
}

export type FieldsListPyxisFieldDataByDataEntryResponse =
  Array<PyxisFieldDataResponse>

export type LoginLoginAccessTokenData = {
  formData: Body_login_login_access_token
}

export type LoginLoginAccessTokenResponse = Token

export type LoginLoginGoogleResponse = unknown

export type LoginAuthGoogleCallbackResponse = unknown

export type LoginRecoverPasswordData = {
  email: string
}

export type LoginRecoverPasswordResponse = Message

export type LoginResetPasswordData = {
  requestBody: NewPassword
}

export type LoginResetPasswordResponse = Message

export type LoginRecoverPasswordHtmlContentData = {
  email: string
}

export type LoginRecoverPasswordHtmlContentResponse = string

export type PrivateCreateUserData = {
  requestBody: PrivateUserCreate
}

export type PrivateCreateUserResponse = UserPublic

export type PrivateTestEmailData = {
  emailTo: string
}

export type PrivateTestEmailResponse = Message

export type PrivateHealthCheckResponse = boolean

export type RootRootResponse = unknown

export type UsersReadUsersData = {
  limit?: number
  skip?: number
}

export type UsersReadUsersResponse = UsersPublic

export type UsersCreateUserData = {
  requestBody: UserCreate
}

export type UsersCreateUserResponse = UserPublic

export type UsersReadUserMeResponse = UserPublic

export type UsersDeleteUserMeResponse = unknown

export type UsersUpdateUserMeData = {
  requestBody: UserUpdateMe
}

export type UsersUpdateUserMeResponse = UserPublic

export type UsersUpdatePasswordMeData = {
  requestBody: UpdatePassword
}

export type UsersUpdatePasswordMeResponse = Message

export type UsersRegisterUserData = {
  requestBody: UserSignup
}

export type UsersRegisterUserResponse = UserPublic

export type UsersReadUserByIdData = {
  userId: string
}

export type UsersReadUserByIdResponse = UserPublic

export type UsersUpdateUserData = {
  requestBody: UserUpdate
  userId: string
}

export type UsersUpdateUserResponse = UserPublic

export type UsersDeleteUserData = {
  userId: string
}

export type UsersDeleteUserResponse = Message
